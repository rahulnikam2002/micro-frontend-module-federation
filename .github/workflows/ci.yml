name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # ----------------------------------------
  # 1️⃣ Setup & install dependencies
  # ----------------------------------------
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/.yarn/cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

  # ----------------------------------------
  # 2️⃣ Run tests for all packages dynamically
  # ----------------------------------------
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Find all packages
        id: packages
        run: |
          echo "PACKAGES<<EOF" >> $GITHUB_OUTPUT
          for dir in packages/*; do
            if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
              echo "${dir}" >> $GITHUB_OUTPUT
            fi
          done
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run tests for all packages
        run: |
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              echo "Running tests for $pkg"
              yarn workspace $(basename $pkg) test --coverage || exit 1
            fi
          done

      - name: Upload all coverage
        run: |
          for pkg in packages/*; do
            if [ -d "$pkg/coverage" ]; then
              name=$(basename $pkg)-coverage
              echo "Uploading coverage artifact: $name"
              gh actions upload-artifact --name $name --path $pkg/coverage
            fi
          done

  # ----------------------------------------
  # 3️⃣ SonarCloud Analysis (dynamic coverage)
  # ----------------------------------------
  sonarcloud:
    runs-on: ubuntu-latest
    needs: test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download all coverage artifacts
        run: |
          for pkg in packages/*; do
            artifact_name=$(basename $pkg)-coverage
            if gh actions download-artifact --name $artifact_name --path $pkg/coverage; then
              echo "Downloaded $artifact_name"
            fi
          done

      - name: Run SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          entryPoint: .
          args: >
            -Dsonar.organization=rahulnikam2002
            -Dsonar.projectKey=rahulnikam2002_micro-frontend-module-federation
            -Dsonar.projectName=micro-frontend-module-federation
            -Dsonar.sources=packages/*/src
            -Dsonar.tests=packages/*/src/__tests__
            -Dsonar.javascript.lcov.reportPaths=packages/*/coverage/lcov.info
